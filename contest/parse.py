#!/usr/bin/python
import os, yaml, hashlib

def find_source(directory, prob):
	for fn in prob['allowed_file']:
		fname = os.path.join(directory, fn)
		if os.path.isfile(fname):
			return fname
	return None
	
def compile_task(cst, prob):
	return 'compiled/%s_%s.log' % (cst, prob['abbrv'])

def test_task(cst, prob, tid):
	return 'tested/%s_%s_%s.log' % (cst, prob['abbrv'], str(tid))

PROGRAM_DIR = 'programs'

data = [i for i in yaml.load_all(open("contest.yaml", "r").read())]
meta = data[0]
problems = data[1:]
Makefile = []

def gen_dep(task, dep_list, todo_list, phony = False):
	global Makefile
	if phony:
		Makefile.append(".PHONY: " + task)
	Makefile.append(task + ': ' + ' '.join(dep_list))
	for item in todo_list:
		Makefile.append('\t' + item)
	Makefile.append("")

gen_dep('all', ['init', 'compile', 'test', 'report'], [])
all_logs = []
all_tests = []
for cst in os.listdir(PROGRAM_DIR):
	for prob in problems:
		fn = find_source(os.path.join(PROGRAM_DIR, cst), prob)
		if fn is not None:
			log = compile_task(cst, prob)
			all_logs.append(log)
			gen_dep(log, [fn], [
				'-g++ $< -o $(@:.log=.exe) &> $@' # do compile here
			])
			for (ti, case) in enumerate(prob['testcases']):
				test = test_task(cst, prob, ti)
				all_tests.append(test)
				gen_dep(test, [compile_task(cst, prob)], [
					'@echo "Yes" > $@',
					'@echo Testing \'#%d\': %s %s' % (ti+1, case['input'], case['output']) # do judge here
				])

gen_dep('init', [], [
	'@mkdir -p compiled tested report',
	'@echo === Testing started ===', # create directories
], phony = True)
gen_dep('compile', all_logs + ['init'], [], phony = True)
gen_dep('test', all_tests + ['compile'], [], phony = True)
gen_dep('report', ['test'], [
	'@echo === Testing done, generate report ===', 
], phony = True)
gen_dep('clean', [], ['rm -rf tested compiled report'], phony = True)

fp = open("Makefile", "w")
fp.write('\n'.join(Makefile))
fp.close()

os.system("make")

def read_file(fn):
	with open(fn, "r") as fp:
		return fp.read().decode('utf-8')

def write_file(fn, data):
	with open(fn, "w") as fp:
		fp.write(data.encode('utf-8'))

Tex = []

TEX_HEADER = (
""" % !Mode:: "TeX:UTF-8"
\documentclass[12pt,a4paper]{article}
\usepackage{xltxtra,fontspec,xunicode}
\usepackage[slantfont,boldfont]{xeCJK} 
\setCJKmainfont{SimSun}""")
for cst in os.listdir(PROGRAM_DIR):
	Tex = [TEX_HEADER, '\\begin{document}']
	Tex.append('\\section*{%s}' % meta['title'])
#	Tex.append('\\subsection*{%s}' % cst)
	for prob in problems:
		prob_title = prob['name'] + ' (%s)' % prob['abbrv']
		Tex.append('\\subsection*{%s}' % prob_title)
		fn = find_source(os.path.join(PROGRAM_DIR, cst), prob)
		if fn is not None:
			log = compile_task(cst, prob)
			src_name = fn.split(os.path.sep)[-1]
			src = read_file(fn)
			md5 = hashlib.md5(src).hexdigest()[:6]
			Tex.append('%s; MD5: {\\tt %s, %d} bytes [Compiled]\n' % (src_name, md5, len(src)))
			for (ti, case) in enumerate(prob['testcases']):
				test = test_task(cst, prob, ti)
				Tex.append('Test Case \\# %d: ' % (ti+1))
				Tex.append(read_file(test_task(cst, prob, ti)))
		else:
			Tex.append('File not found.')

	Tex.append('\\vspace{2cm}')
	Tex.append('\nSignature (Student) (Teacher)\n')
	Tex.append('Generated by \XeTeX\n')
	Tex.append('\\end{document}')
	write_file(os.path.join('report', cst + '.tex'), '\n'.join(Tex))
	os.system("cd report && xelatex %s.tex < /dev/null &> /dev/null" % cst)
os.system("rm -f report/*.aux report/*.log")
